# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `ruby-dap` gem.
# Please instead update this file by running `bin/tapioca gem ruby-dap`.


# The Debug Adapter Protocol
#
# source://ruby-dap//lib/dap.rb#4
module DAP
  class << self
    # Decode a DAP message from the stream.
    #
    # @param s [IO] the stream
    # @return [ProtocolMessage] the message
    #
    # source://ruby-dap//lib/dap.rb#6
    def decode(s); end

    # Decode all DAP messages from the stream.
    #
    # @param s [IO] the stream
    # @yield Invokes the block for each message
    #
    # source://ruby-dap//lib/dap.rb#16
    def decode_all(s, &block); end

    # Encode a DAP message to a string.
    #
    # @param message [ProtocolMessage] the message
    # @return [String] the encoded message
    #
    # source://ruby-dap//lib/dap.rb#11
    def encode(message); end
  end
end

# Arguments for ‘attach’ request. Additional attributes are implementation
# specific.
#
# source://ruby-dap//lib/dap/attach_request_arguments.rb#3
class DAP::AttachRequestArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def __restart; end
end

# Base class for DAP types
#
# source://ruby-dap//lib/dap/base.rb#2
class DAP::Base
  # Create a new instance of the receiver.
  #
  # @param values [Hash] the object's attributes
  # @return [Base] a new instance of Base
  #
  # source://ruby-dap//lib/dap/base.rb#120
  def initialize(values); end

  # source://ruby-dap//lib/dap/base.rb#170
  def [](key); end

  # Convert the receiver to a form suitable for encoding.
  #
  # @return [Hash]
  #
  # source://ruby-dap//lib/dap/base.rb#155
  def to_wire; end

  # Validate property values against their expectations.
  #
  # source://ruby-dap//lib/dap/base.rb#134
  def validate!; end

  private

  # source://ruby-dap//lib/dap/base.rb#177
  def []=(key, value); end

  # source://ruby-dap//lib/dap/base.rb#182
  def convert_complex(v); end

  class << self
    # Build an instance of a DAP type.
    #
    # @param values [Hash|String] attribute values or enum string
    # @yieldparam values [Hash] normalized attribute values (optional)
    # @yieldreturn [Class] the class to instantiate
    #
    # source://ruby-dap//lib/dap/base.rb#7
    def build(values, &block); end

    # Returns a relation that indicates a property is expected to be an empty
    # object.
    #
    # source://ruby-dap//lib/dap/base.rb#41
    def empty; end

    # Returns a relation that indicates a property should be an array of the
    # specified type.
    #
    # @param klazz [Class] the expected type of members of the property
    # @return [Relation::Many]
    #
    # source://ruby-dap//lib/dap/base.rb#27
    def many(klazz); end

    # Returns a relation that indicates a property should be one of a set of
    # types.
    #
    # @param choices [Hash[String, Class]] the allowed property types
    # @return [Relation::OneOf]
    #
    # source://ruby-dap//lib/dap/base.rb#35
    def one_of(choices); end

    # Properties of the receiver.
    #
    # source://ruby-dap//lib/dap/base.rb#97
    def properties; end

    # Defines a property or properties.
    #
    # @param names [Array<Symbol>] the properties
    # @param as [Class|Relation|String] the expected type of the property
    # @param required [Boolean] whether the property is required
    #
    # source://ruby-dap//lib/dap/base.rb#49
    def property(*names, as: T.unsafe(nil), required: T.unsafe(nil)); end

    # Names of the receiver's properties.
    #
    # source://ruby-dap//lib/dap/base.rb#105
    def property_names; end

    # Retreives the transform for the named property.
    #
    # @param name [String] the property name
    # @return [Proc] the transform
    #
    # source://ruby-dap//lib/dap/base.rb#112
    def transform(name); end
  end
end

# Information about a Breakpoint created in setBreakpoints,
# setFunctionBreakpoints, setInstructionBreakpoints, or setDataBreakpoints.
#
# source://ruby-dap//lib/dap/breakpoint.rb#5
class DAP::Breakpoint < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endColumn; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endLine; end

  # source://ruby-dap//lib/dap/base.rb#93
  def id; end

  # source://ruby-dap//lib/dap/base.rb#93
  def instructionReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def message; end

  # source://ruby-dap//lib/dap/base.rb#93
  def offset; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end

  # source://ruby-dap//lib/dap/base.rb#93
  def verified; end
end

# The event indicates that some information about a breakpoint has changed.
#
# source://ruby-dap//lib/dap/breakpoint_event_body.rb#4
class DAP::BreakpointEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def reason; end
end

# Properties of a breakpoint location returned from the ‘breakpointLocations’
# request.
#
# source://ruby-dap//lib/dap/breakpoint_location.rb#3
class DAP::BreakpointLocation < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endColumn; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endLine; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end
end

# Arguments for ‘breakpointLocations’ request.
#
# source://ruby-dap//lib/dap/breakpoint_locations_arguments.rb#4
class DAP::BreakpointLocationsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endColumn; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endLine; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end
end

# Response to ‘breakpointLocations’ request. Contains possible locations for
# source breakpoints.
#
# source://ruby-dap//lib/dap/breakpoint_locations_response_body.rb#5
class DAP::BreakpointLocationsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Arguments for ‘cancel’ request.
#
# source://ruby-dap//lib/dap/cancel_arguments.rb#2
class DAP::CancelArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def progressId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def requestId; end
end

# Information about the capabilities of a debug adapter.
#
# source://ruby-dap//lib/dap/capabilities.rb#6
class DAP::Capabilities < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def additionalModuleColumns; end

  # source://ruby-dap//lib/dap/base.rb#93
  def completionTriggerCharacters; end

  # source://ruby-dap//lib/dap/base.rb#93
  def exceptionBreakpointFilters; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportTerminateDebuggee; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportedChecksumAlgorithms; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsBreakpointLocationsRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsCancelRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsClipboardContext; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsCompletionsRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsConditionalBreakpoints; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsConfigurationDoneRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsDataBreakpoints; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsDelayedStackTraceLoading; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsDisassembleRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsEvaluateForHovers; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsExceptionInfoRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsExceptionOptions; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsFunctionBreakpoints; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsGotoTargetsRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsHitConditionalBreakpoints; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsInstructionBreakpoints; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsLoadedSourcesRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsLogPoints; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsModulesRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsReadMemoryRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsRestartFrame; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsRestartRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsSetExpression; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsSetVariable; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsStepBack; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsStepInTargetsRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsSteppingGranularity; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsTerminateRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsTerminateThreadsRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsValueFormattingOptions; end
end

# The event indicates that one or more capabilities have changed. Since the
# capabilities are dependent on the frontend and its UI, it might not be possible
# to change that at random times (or too late). Consequently this event has a hint
# characteristic: a frontend can only be expected to make a ‘best effort’ in
# honouring individual capabilities but there are no guarantees. Only changed
# capabilities need to be included, all other capabilities keep their values.
#
# source://ruby-dap//lib/dap/capabilities_event_body.rb#9
class DAP::CapabilitiesEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def capabilities; end
end

# The checksum of an item calculated by the specified algorithm.
#
# source://ruby-dap//lib/dap/checksum.rb#4
class DAP::Checksum < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def algorithm; end

  # source://ruby-dap//lib/dap/base.rb#93
  def checksum; end
end

# Names of checksum algorithms that may be supported by a debug adapter.
#
# source://ruby-dap//lib/dap/checksum_algorithm.rb#2
class DAP::ChecksumAlgorithm < ::DAP::Enum; end

# source://ruby-dap//lib/dap/checksum_algorithm.rb#3
DAP::ChecksumAlgorithm::MD5 = T.let(T.unsafe(nil), DAP::ChecksumAlgorithm)

# source://ruby-dap//lib/dap/checksum_algorithm.rb#4
DAP::ChecksumAlgorithm::SHA1 = T.let(T.unsafe(nil), DAP::ChecksumAlgorithm)

# source://ruby-dap//lib/dap/checksum_algorithm.rb#5
DAP::ChecksumAlgorithm::SHA256 = T.let(T.unsafe(nil), DAP::ChecksumAlgorithm)

# source://ruby-dap//lib/dap/checksum_algorithm.rb#6
DAP::ChecksumAlgorithm::TIMESTAMP = T.let(T.unsafe(nil), DAP::ChecksumAlgorithm)

# A ColumnDescriptor specifies what module attribute to show in a column of the
# ModulesView, how to format it, and what the column’s label should be. It is only
# used if the underlying UI actually supports this level of customization.
#
# source://ruby-dap//lib/dap/column_descriptor.rb#4
class DAP::ColumnDescriptor < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def attributeName; end

  # source://ruby-dap//lib/dap/base.rb#93
  def format; end

  # source://ruby-dap//lib/dap/base.rb#93
  def label; end

  # source://ruby-dap//lib/dap/base.rb#93
  def type; end

  # source://ruby-dap//lib/dap/base.rb#93
  def width; end
end

# CompletionItems are the suggestions returned from the CompletionsRequest.
#
# source://ruby-dap//lib/dap/completion_item.rb#4
class DAP::CompletionItem < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def label; end

  # source://ruby-dap//lib/dap/base.rb#93
  def length; end

  # source://ruby-dap//lib/dap/base.rb#93
  def selectionLength; end

  # source://ruby-dap//lib/dap/base.rb#93
  def selectionStart; end

  # source://ruby-dap//lib/dap/base.rb#93
  def sortText; end

  # source://ruby-dap//lib/dap/base.rb#93
  def start; end

  # source://ruby-dap//lib/dap/base.rb#93
  def text; end

  # source://ruby-dap//lib/dap/base.rb#93
  def type; end
end

# Some predefined types for the CompletionItem. Please note that not all clients
# have specific icons for all of them.
#
# source://ruby-dap//lib/dap/completion_item_type.rb#3
class DAP::CompletionItemType < ::DAP::Enum; end

# source://ruby-dap//lib/dap/completion_item_type.rb#9
DAP::CompletionItemType::CLASS = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#19
DAP::CompletionItemType::COLOR = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#6
DAP::CompletionItemType::CONSTRUCTOR = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#22
DAP::CompletionItemType::CUSTOMCOLOR = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#15
DAP::CompletionItemType::ENUM = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#7
DAP::CompletionItemType::FIELD = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#20
DAP::CompletionItemType::FILE = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#5
DAP::CompletionItemType::FUNCTION = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#10
DAP::CompletionItemType::INTERFACE = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#16
DAP::CompletionItemType::KEYWORD = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#4
DAP::CompletionItemType::METHOD = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#11
DAP::CompletionItemType::MODULE = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#12
DAP::CompletionItemType::PROPERTY = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#21
DAP::CompletionItemType::REFERENCE = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#17
DAP::CompletionItemType::SNIPPET = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#18
DAP::CompletionItemType::TEXT = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#13
DAP::CompletionItemType::UNIT = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#14
DAP::CompletionItemType::VALUE = T.let(T.unsafe(nil), DAP::CompletionItemType)

# source://ruby-dap//lib/dap/completion_item_type.rb#8
DAP::CompletionItemType::VARIABLE = T.let(T.unsafe(nil), DAP::CompletionItemType)

# Arguments for ‘completions’ request.
#
# source://ruby-dap//lib/dap/completions_arguments.rb#2
class DAP::CompletionsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def frameId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def text; end
end

# Response to ‘completions’ request.
#
# source://ruby-dap//lib/dap/completions_response_body.rb#4
class DAP::CompletionsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def targets; end
end

# Arguments for ‘continue’ request.
#
# source://ruby-dap//lib/dap/continue_arguments.rb#2
class DAP::ContinueArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Response to ‘continue’ request.
#
# source://ruby-dap//lib/dap/continue_response_body.rb#2
class DAP::ContinueResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def allThreadsContinued; end
end

# The event indicates that the execution of the debuggee has continued. Please
# note: a debug adapter is not expected to send this event in response to a
# request that implies that execution continues, e.g. ‘launch’ or ‘continue’. It
# is only necessary to send a ‘continued’ event if there was no previous request
# that implied this.
#
# source://ruby-dap//lib/dap/continued_event_body.rb#6
class DAP::ContinuedEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def allThreadsContinued; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Properties of a data breakpoint passed to the setDataBreakpoints request.
#
# source://ruby-dap//lib/dap/data_breakpoint.rb#4
class DAP::DataBreakpoint < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def accessType; end

  # source://ruby-dap//lib/dap/base.rb#93
  def condition; end

  # source://ruby-dap//lib/dap/base.rb#93
  def dataId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def hitCondition; end
end

# This enumeration defines all possible access types for data breakpoints.
#
# source://ruby-dap//lib/dap/data_breakpoint_access_type.rb#2
class DAP::DataBreakpointAccessType < ::DAP::Enum; end

# source://ruby-dap//lib/dap/data_breakpoint_access_type.rb#3
DAP::DataBreakpointAccessType::READ = T.let(T.unsafe(nil), DAP::DataBreakpointAccessType)

# source://ruby-dap//lib/dap/data_breakpoint_access_type.rb#5
DAP::DataBreakpointAccessType::READWRITE = T.let(T.unsafe(nil), DAP::DataBreakpointAccessType)

# source://ruby-dap//lib/dap/data_breakpoint_access_type.rb#4
DAP::DataBreakpointAccessType::WRITE = T.let(T.unsafe(nil), DAP::DataBreakpointAccessType)

# Arguments for ‘dataBreakpointInfo’ request.
#
# source://ruby-dap//lib/dap/data_breakpoint_info_arguments.rb#2
class DAP::DataBreakpointInfoArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Response to ‘dataBreakpointInfo’ request.
#
# source://ruby-dap//lib/dap/data_breakpoint_info_response_body.rb#4
class DAP::DataBreakpointInfoResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def accessTypes; end

  # source://ruby-dap//lib/dap/base.rb#93
  def canPersist; end

  # source://ruby-dap//lib/dap/base.rb#93
  def dataId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def description; end
end

# Arguments for ‘disassemble’ request.
#
# source://ruby-dap//lib/dap/disassemble_arguments.rb#2
class DAP::DisassembleArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def instructionCount; end

  # source://ruby-dap//lib/dap/base.rb#93
  def instructionOffset; end

  # source://ruby-dap//lib/dap/base.rb#93
  def memoryReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def offset; end

  # source://ruby-dap//lib/dap/base.rb#93
  def resolveSymbols; end
end

# Response to ‘disassemble’ request.
#
# source://ruby-dap//lib/dap/disassemble_response_body.rb#4
class DAP::DisassembleResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def instructions; end
end

# Represents a single disassembled instruction.
#
# source://ruby-dap//lib/dap/disassembled_instruction.rb#4
class DAP::DisassembledInstruction < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def address; end

  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endColumn; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endLine; end

  # source://ruby-dap//lib/dap/base.rb#93
  def instruction; end

  # source://ruby-dap//lib/dap/base.rb#93
  def instructionBytes; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def location; end

  # source://ruby-dap//lib/dap/base.rb#93
  def symbol; end
end

# Arguments for ‘disconnect’ request.
#
# source://ruby-dap//lib/dap/disconnect_arguments.rb#2
class DAP::DisconnectArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def restart; end

  # source://ruby-dap//lib/dap/base.rb#93
  def terminateDebuggee; end
end

# Encoding and decoding for DAP messages
#
# source://ruby-dap//lib/dap/encoding.rb#2
module DAP::Encoding
  class << self
    # Decode a DAP message from the stream.
    #
    # @param s [IO] the stream
    # @return [ProtocolMessage] the message
    #
    # source://ruby-dap//lib/dap/encoding.rb#9
    def decode(s); end

    # Decode all DAP messages from the stream.
    #
    # @param s [IO] the stream
    # @yield Invokes the block for each message
    #
    # source://ruby-dap//lib/dap/encoding.rb#53
    def decode_all(s); end

    # Encode a DAP message to a string.
    #
    # @param message [ProtocolMessage] the message
    # @return [String] the encoded message
    #
    # source://ruby-dap//lib/dap/encoding.rb#39
    def encode(message); end
  end
end

# The name of the content length header.
#
# source://ruby-dap//lib/dap/encoding.rb#4
DAP::Encoding::CONTENT_LENGTH_HEADER = T.let(T.unsafe(nil), String)

# Base class for DAP enumerations
#
# source://ruby-dap//lib/dap/enum.rb#2
class DAP::Enum
  # @return [Enum] a new instance of Enum
  #
  # source://ruby-dap//lib/dap/enum.rb#26
  def initialize(value); end

  # The enumeration string value
  #
  # source://ruby-dap//lib/dap/enum.rb#11
  def to_s; end

  # The enumeration string value, suitable for encoding
  #
  # source://ruby-dap//lib/dap/enum.rb#16
  def to_wire; end

  class << self
    # Retreive an enumeration instance by value.
    #
    # @param value [String] the enumeration string value
    # @return [Enum] the enumeration instance
    #
    # source://ruby-dap//lib/dap/enum.rb#6
    def from(value); end

    # source://ruby-dap//lib/dap/enum.rb#22
    def new(value); end

    # source://ruby-dap//lib/dap/enum.rb#31
    def values; end
  end
end

# On error (whenever ‘success’ is false), the body can provide more details.
#
# source://ruby-dap//lib/dap/error_response_body.rb#4
class DAP::ErrorResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def error; end
end

# Arguments for ‘evaluate’ request.
#
# source://ruby-dap//lib/dap/evaluate_arguments.rb#4
class DAP::EvaluateArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def context; end

  # source://ruby-dap//lib/dap/base.rb#93
  def expression; end

  # source://ruby-dap//lib/dap/base.rb#93
  def format; end

  # source://ruby-dap//lib/dap/base.rb#93
  def frameId; end
end

# Response to ‘evaluate’ request.
#
# source://ruby-dap//lib/dap/evaluate_response_body.rb#4
class DAP::EvaluateResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def indexedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def memoryReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def namedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def presentationHint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def result; end

  # source://ruby-dap//lib/dap/base.rb#93
  def type; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Base class of requests, responses, and events.
#
# source://ruby-dap//lib/dap/event.rb#18
class DAP::Event < ::DAP::ProtocolMessage
  # source://ruby-dap//lib/dap/base.rb#93
  def body; end

  # source://ruby-dap//lib/dap/base.rb#93
  def event; end

  class << self
    # Allowed event kinds and their body types.
    #
    # @return [Hash<Symbol, Class>]
    #
    # source://ruby-dap//lib/dap/event.rb#26
    def bodies; end

    # source://ruby-dap//lib/dap/event.rb#20
    def type; end
  end
end

# This enumeration defines all possible conditions when a thrown exception should
# result in a break.
#
# source://ruby-dap//lib/dap/exception_break_mode.rb#3
class DAP::ExceptionBreakMode < ::DAP::Enum; end

# always breaks
#
# source://ruby-dap//lib/dap/exception_break_mode.rb#7
DAP::ExceptionBreakMode::ALWAYS = T.let(T.unsafe(nil), DAP::ExceptionBreakMode)

# never breaks
#
# source://ruby-dap//lib/dap/exception_break_mode.rb#5
DAP::ExceptionBreakMode::NEVER = T.let(T.unsafe(nil), DAP::ExceptionBreakMode)

# breaks when exception unhandled
#
# source://ruby-dap//lib/dap/exception_break_mode.rb#9
DAP::ExceptionBreakMode::UNHANDLED = T.let(T.unsafe(nil), DAP::ExceptionBreakMode)

# breaks if the exception is not handled by user code
#
# source://ruby-dap//lib/dap/exception_break_mode.rb#11
DAP::ExceptionBreakMode::USERUNHANDLED = T.let(T.unsafe(nil), DAP::ExceptionBreakMode)

# An ExceptionBreakpointsFilter is shown in the UI as an option for configuring
# how exceptions are dealt with.
#
# source://ruby-dap//lib/dap/exception_breakpoints_filter.rb#3
class DAP::ExceptionBreakpointsFilter < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def default; end

  # source://ruby-dap//lib/dap/base.rb#93
  def filter; end

  # source://ruby-dap//lib/dap/base.rb#93
  def label; end
end

# Detailed information about an exception that has occurred.
#
# source://ruby-dap//lib/dap/exception_details.rb#4
class DAP::ExceptionDetails < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def evaluateName; end

  # source://ruby-dap//lib/dap/base.rb#93
  def fullTypeName; end

  # source://ruby-dap//lib/dap/base.rb#93
  def innerException; end

  # source://ruby-dap//lib/dap/base.rb#93
  def message; end

  # source://ruby-dap//lib/dap/base.rb#93
  def stackTrace; end

  # source://ruby-dap//lib/dap/base.rb#93
  def typeName; end
end

# Arguments for ‘exceptionInfo’ request.
#
# source://ruby-dap//lib/dap/exception_info_arguments.rb#2
class DAP::ExceptionInfoArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Response to ‘exceptionInfo’ request.
#
# source://ruby-dap//lib/dap/exception_info_response_body.rb#5
class DAP::ExceptionInfoResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakMode; end

  # source://ruby-dap//lib/dap/base.rb#93
  def description; end

  # source://ruby-dap//lib/dap/base.rb#93
  def details; end

  # source://ruby-dap//lib/dap/base.rb#93
  def exceptionId; end
end

# An ExceptionOptions assigns configuration options to a set of exceptions.
#
# source://ruby-dap//lib/dap/exception_options.rb#5
class DAP::ExceptionOptions < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakMode; end

  # source://ruby-dap//lib/dap/base.rb#93
  def path; end
end

# An ExceptionPathSegment represents a segment in a path that is used to match
# leafs or nodes in a tree of exceptions. If a segment consists of more than one
# name, it matches the names provided if ‘negate’ is false or missing or it
# matches anything except the names provided if ‘negate’ is true.
#
# source://ruby-dap//lib/dap/exception_path_segment.rb#5
class DAP::ExceptionPathSegment < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def names; end

  # source://ruby-dap//lib/dap/base.rb#93
  def negate; end
end

# The event indicates that the debuggee has exited and returns its exit code.
#
# source://ruby-dap//lib/dap/exited_event_body.rb#2
class DAP::ExitedEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def exitCode; end
end

# Properties of a breakpoint passed to the setFunctionBreakpoints request.
#
# source://ruby-dap//lib/dap/function_breakpoint.rb#2
class DAP::FunctionBreakpoint < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def condition; end

  # source://ruby-dap//lib/dap/base.rb#93
  def hitCondition; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end
end

# Arguments for ‘goto’ request.
#
# source://ruby-dap//lib/dap/goto_arguments.rb#2
class DAP::GotoArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def targetId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# A GotoTarget describes a code location that can be used as a target in the
# ‘goto’ request. The possible goto targets can be determined via the
# ‘gotoTargets’ request.
#
# source://ruby-dap//lib/dap/goto_target.rb#4
class DAP::GotoTarget < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endColumn; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endLine; end

  # source://ruby-dap//lib/dap/base.rb#93
  def id; end

  # source://ruby-dap//lib/dap/base.rb#93
  def instructionPointerReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def label; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end
end

# Arguments for ‘gotoTargets’ request.
#
# source://ruby-dap//lib/dap/goto_targets_arguments.rb#4
class DAP::GotoTargetsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end
end

# Response to ‘gotoTargets’ request.
#
# source://ruby-dap//lib/dap/goto_targets_response_body.rb#4
class DAP::GotoTargetsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def targets; end
end

# Arguments for ‘initialize’ request.
#
# source://ruby-dap//lib/dap/initialize_request_arguments.rb#2
class DAP::InitializeRequestArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def adapterID; end

  # source://ruby-dap//lib/dap/base.rb#93
  def clientID; end

  # source://ruby-dap//lib/dap/base.rb#93
  def clientName; end

  # source://ruby-dap//lib/dap/base.rb#93
  def columnsStartAt1; end

  # source://ruby-dap//lib/dap/base.rb#93
  def linesStartAt1; end

  # source://ruby-dap//lib/dap/base.rb#93
  def locale; end

  # source://ruby-dap//lib/dap/base.rb#93
  def pathFormat; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsInvalidatedEvent; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsMemoryReferences; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsProgressReporting; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsRunInTerminalRequest; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsVariablePaging; end

  # source://ruby-dap//lib/dap/base.rb#93
  def supportsVariableType; end
end

# Properties of a breakpoint passed to the setInstructionBreakpoints request
#
# source://ruby-dap//lib/dap/instruction_breakpoint.rb#2
class DAP::InstructionBreakpoint < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def condition; end

  # source://ruby-dap//lib/dap/base.rb#93
  def hitCondition; end

  # source://ruby-dap//lib/dap/base.rb#93
  def instructionReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def offset; end
end

# This event signals that some state in the debug adapter has changed and requires
# that the client needs to re-render the data snapshot previously requested. Debug
# adapters do not have to emit this event for runtime changes like stopped or
# thread events because in that case the client refetches the new state anyway.
# But the event can be used for example to refresh the UI after rendering
# formatting has changed in the debug adapter. This event should only be sent if
# the debug adapter has received a value true for the ‘supportsInvalidatedEvent’
# capability of the ‘initialize’ request.
#
# source://ruby-dap//lib/dap/invalidated_event_body.rb#9
class DAP::InvalidatedEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def areas; end

  # source://ruby-dap//lib/dap/base.rb#93
  def stackFrameId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Arguments for ‘launch’ request. Additional attributes are implementation
# specific.
#
# source://ruby-dap//lib/dap/launch_request_arguments.rb#3
class DAP::LaunchRequestArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def __restart; end

  # source://ruby-dap//lib/dap/base.rb#93
  def noDebug; end
end

# The event indicates that some source has been added, changed, or removed from
# the set of all loaded sources.
#
# source://ruby-dap//lib/dap/loaded_source_event_body.rb#5
class DAP::LoadedSourceEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def reason; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end
end

# Response to ‘loadedSources’ request.
#
# source://ruby-dap//lib/dap/loaded_sources_response_body.rb#4
class DAP::LoadedSourcesResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def sources; end
end

# A structured message object. Used to return errors from requests.
#
# source://ruby-dap//lib/dap/message.rb#2
class DAP::Message < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def format; end

  # source://ruby-dap//lib/dap/base.rb#93
  def id; end

  # source://ruby-dap//lib/dap/base.rb#93
  def sendTelemetry; end

  # source://ruby-dap//lib/dap/base.rb#93
  def showUser; end

  # source://ruby-dap//lib/dap/base.rb#93
  def url; end

  # source://ruby-dap//lib/dap/base.rb#93
  def urlLabel; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variables; end
end

# A Module object represents a row in the modules view. Two attributes are
# mandatory: an id identifies a module in the modules view and is used in a
# ModuleEvent for identifying a module for adding, updating or deleting. The name
# is used to minimally render the module in the UI. Additional attributes can be
# added to the module. They will show up in the module View if they have a
# corresponding ColumnDescriptor. To avoid an unnecessary proliferation of
# additional attributes with similar semantics but different names we recommend to
# re-use attributes from the ‘recommended’ list below first, and only introduce
# new attributes if nothing appropriate could be found.
#
# source://ruby-dap//lib/dap/module.rb#10
class DAP::Module < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def addressRange; end

  # source://ruby-dap//lib/dap/base.rb#93
  def dateTimeStamp; end

  # source://ruby-dap//lib/dap/base.rb#93
  def id; end

  # source://ruby-dap//lib/dap/base.rb#93
  def isOptimized; end

  # source://ruby-dap//lib/dap/base.rb#93
  def isUserCode; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def symbolFilePath; end

  # source://ruby-dap//lib/dap/base.rb#93
  def symbolStatus; end

  # source://ruby-dap//lib/dap/base.rb#93
  def version; end
end

# The event indicates that some information about a module has changed.
#
# source://ruby-dap//lib/dap/module_event_body.rb#4
class DAP::ModuleEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def module; end

  # source://ruby-dap//lib/dap/base.rb#93
  def reason; end
end

# Arguments for ‘modules’ request.
#
# source://ruby-dap//lib/dap/modules_arguments.rb#2
class DAP::ModulesArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def moduleCount; end

  # source://ruby-dap//lib/dap/base.rb#93
  def startModule; end
end

# Response to ‘modules’ request.
#
# source://ruby-dap//lib/dap/modules_response_body.rb#4
class DAP::ModulesResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def modules; end

  # source://ruby-dap//lib/dap/base.rb#93
  def totalModules; end
end

# Arguments for ‘next’ request.
#
# source://ruby-dap//lib/dap/next_arguments.rb#4
class DAP::NextArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def granularity; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# The event indicates that the target has produced some output.
#
# source://ruby-dap//lib/dap/output_event_body.rb#4
class DAP::OutputEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def category; end

  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def data; end

  # source://ruby-dap//lib/dap/base.rb#93
  def group; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def output; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Arguments for ‘pause’ request.
#
# source://ruby-dap//lib/dap/pause_arguments.rb#2
class DAP::PauseArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# The event indicates that the debugger has begun debugging a new process. Either
# one that it has launched, or one that it has attached to.
#
# source://ruby-dap//lib/dap/process_event_body.rb#3
class DAP::ProcessEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def isLocalProcess; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def pointerSize; end

  # source://ruby-dap//lib/dap/base.rb#93
  def startMethod; end

  # source://ruby-dap//lib/dap/base.rb#93
  def systemProcessId; end
end

# The event signals the end of the progress reporting with an optional final
# message. This event should only be sent if the client has passed the value true
# for the ‘supportsProgressReporting’ capability of the ‘initialize’ request.
#
# source://ruby-dap//lib/dap/progress_end_event_body.rb#4
class DAP::ProgressEndEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def message; end

  # source://ruby-dap//lib/dap/base.rb#93
  def progressId; end
end

# The event signals that a long running operation is about to start and provides
# additional information for the client to set up a corresponding progress and
# cancellation UI. The client is free to delay the showing of the UI in order to
# reduce flicker. This event should only be sent if the client has passed the
# value true for the ‘supportsProgressReporting’ capability of the ‘initialize’
# request.
#
# source://ruby-dap//lib/dap/progress_start_event_body.rb#7
class DAP::ProgressStartEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def cancellable; end

  # source://ruby-dap//lib/dap/base.rb#93
  def message; end

  # source://ruby-dap//lib/dap/base.rb#93
  def percentage; end

  # source://ruby-dap//lib/dap/base.rb#93
  def progressId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def requestId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def title; end
end

# The event signals that the progress reporting needs to updated with a new
# message and/or percentage. The client does not have to update the UI
# immediately, but the clients needs to keep track of the message and/or
# percentage values. This event should only be sent if the client has passed the
# value true for the ‘supportsProgressReporting’ capability of the ‘initialize’
# request.
#
# source://ruby-dap//lib/dap/progress_update_event_body.rb#7
class DAP::ProgressUpdateEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def message; end

  # source://ruby-dap//lib/dap/base.rb#93
  def percentage; end

  # source://ruby-dap//lib/dap/base.rb#93
  def progressId; end
end

# Base class of requests, responses, and events.
#
# source://ruby-dap//lib/dap/protocol_message.rb#2
class DAP::ProtocolMessage < ::DAP::Base
  # Create a new instance of the receiver.
  #
  # @param values [Hash] the object's attributes
  # @return [ProtocolMessage] a new instance of ProtocolMessage
  #
  # source://ruby-dap//lib/dap/protocol_message.rb#33
  def initialize(values); end

  # source://ruby-dap//lib/dap/base.rb#93
  def seq; end

  # source://ruby-dap//lib/dap/base.rb#93
  def type; end

  class << self
    # Create a protocol message from attribute values.
    #
    # @param values [Hash] the attribute values
    #
    # source://ruby-dap//lib/dap/protocol_message.rb#15
    def from(values); end

    # source://ruby-dap//lib/dap/protocol_message.rb#41
    def seq; end

    # Valid protocol message types.
    #
    # @return [Hash<Symbol,Class>]
    #
    # source://ruby-dap//lib/dap/protocol_message.rb#5
    def types; end
  end
end

# Arguments for ‘readMemory’ request.
#
# source://ruby-dap//lib/dap/read_memory_arguments.rb#2
class DAP::ReadMemoryArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def count; end

  # source://ruby-dap//lib/dap/base.rb#93
  def memoryReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def offset; end
end

# Response to ‘readMemory’ request.
#
# source://ruby-dap//lib/dap/read_memory_response_body.rb#2
class DAP::ReadMemoryResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def address; end

  # source://ruby-dap//lib/dap/base.rb#93
  def data; end

  # source://ruby-dap//lib/dap/base.rb#93
  def unreadableBytes; end
end

# Relationships between DAP types
#
# source://ruby-dap//lib/dap/relation.rb#2
module DAP::Relation
  class << self
    # Raises an error if `klazz` is not an allowed DAP type
    #
    # source://ruby-dap//lib/dap/relation.rb#4
    def supported!(klazz); end
  end
end

# Indicates a property is expected to be an array of the specified type
#
# source://ruby-dap//lib/dap/relation.rb#9
class DAP::Relation::Many
  # @param klazz [Class] the expected element type
  # @return [Many] a new instance of Many
  #
  # source://ruby-dap//lib/dap/relation.rb#14
  def initialize(klazz); end

  # The expected element type.
  #
  # source://ruby-dap//lib/dap/relation.rb#11
  def klazz; end
end

# Indicates a property is expected to be one of a set of types
#
# source://ruby-dap//lib/dap/relation.rb#21
class DAP::Relation::OneOf
  # @param types [Hash<Symbol, Class>] the allowed key property values and expected types
  # @return [OneOf] a new instance of OneOf
  #
  # source://ruby-dap//lib/dap/relation.rb#29
  def initialize(types); end

  # Sets the expected type for a specified value of the key property.
  #
  # @param k [Symbol] the specified value
  # @param v [Class] the expected type
  #
  # source://ruby-dap//lib/dap/relation.rb#45
  def []=(k, v); end

  # The name of the key property.
  #
  # source://ruby-dap//lib/dap/relation.rb#26
  def key; end

  # The allowed key property values and expected types.
  #
  # source://ruby-dap//lib/dap/relation.rb#23
  def types; end

  # Specifies the key property that is used to determine which type is selected.
  #
  # @param key [Symbol] the name of the key property
  #
  # source://ruby-dap//lib/dap/relation.rb#36
  def with(key); end
end

# A client or debug adapter initiated request.
#
# source://ruby-dap//lib/dap/request.rb#41
class DAP::Request < ::DAP::ProtocolMessage
  # source://ruby-dap//lib/dap/base.rb#93
  def arguments; end

  # source://ruby-dap//lib/dap/base.rb#93
  def command; end

  class << self
    # Allowed request commands and their arguments types.
    #
    # @return [Hash<Symbol, Class>]
    #
    # source://ruby-dap//lib/dap/request.rb#49
    def arguments; end

    # source://ruby-dap//lib/dap/request.rb#43
    def type; end
  end
end

# Response for a request.
#
# source://ruby-dap//lib/dap/response.rb#29
class DAP::Response < ::DAP::ProtocolMessage
  # source://ruby-dap//lib/dap/base.rb#93
  def body; end

  # source://ruby-dap//lib/dap/base.rb#93
  def command; end

  # source://ruby-dap//lib/dap/base.rb#93
  def message; end

  # source://ruby-dap//lib/dap/base.rb#93
  def request_seq; end

  # source://ruby-dap//lib/dap/base.rb#93
  def success; end

  # Validate property values against their expectations.
  #
  # source://ruby-dap//lib/dap/response.rb#86
  def validate!; end

  class << self
    # Allowed response commands and their body types.
    #
    # @return [Hash<Symbol, Class>]
    #
    # source://ruby-dap//lib/dap/response.rb#37
    def bodies; end

    # source://ruby-dap//lib/dap/response.rb#31
    def type; end
  end
end

# Arguments for ‘restartFrame’ request.
#
# source://ruby-dap//lib/dap/restart_frame_arguments.rb#2
class DAP::RestartFrameArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def frameId; end
end

# Arguments for ‘reverseContinue’ request.
#
# source://ruby-dap//lib/dap/reverse_continue_arguments.rb#2
class DAP::ReverseContinueArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Arguments for ‘runInTerminal’ request.
#
# source://ruby-dap//lib/dap/run_in_terminal_request_arguments.rb#2
class DAP::RunInTerminalRequestArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def args; end

  # source://ruby-dap//lib/dap/base.rb#93
  def cwd; end

  # source://ruby-dap//lib/dap/base.rb#93
  def env; end

  # source://ruby-dap//lib/dap/base.rb#93
  def kind; end

  # source://ruby-dap//lib/dap/base.rb#93
  def title; end
end

# Response to ‘runInTerminal’ request.
#
# source://ruby-dap//lib/dap/run_in_terminal_response_body.rb#2
class DAP::RunInTerminalResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def processId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def shellProcessId; end
end

# A Scope is a named container for variables. Optionally a scope can map to a
# source or a range within a source.
#
# source://ruby-dap//lib/dap/scope.rb#5
class DAP::Scope < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endColumn; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endLine; end

  # source://ruby-dap//lib/dap/base.rb#93
  def expensive; end

  # source://ruby-dap//lib/dap/base.rb#93
  def indexedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def namedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def presentationHint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Arguments for ‘scopes’ request.
#
# source://ruby-dap//lib/dap/scopes_arguments.rb#2
class DAP::ScopesArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def frameId; end
end

# Response to ‘scopes’ request.
#
# source://ruby-dap//lib/dap/scopes_response_body.rb#4
class DAP::ScopesResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def scopes; end
end

# Arguments for ‘setBreakpoints’ request.
#
# source://ruby-dap//lib/dap/set_breakpoints_arguments.rb#5
class DAP::SetBreakpointsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end

  # source://ruby-dap//lib/dap/base.rb#93
  def lines; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end

  # source://ruby-dap//lib/dap/base.rb#93
  def sourceModified; end
end

# Response to ‘setBreakpoints’ request. Returned is information about each
# breakpoint created by this request. This includes the actual code location and
# whether the breakpoint could be verified. The breakpoints returned are in the
# same order as the elements of the ‘breakpoints’ (or the deprecated ‘lines’)
# array in the arguments.
#
# source://ruby-dap//lib/dap/set_breakpoints_response_body.rb#8
class DAP::SetBreakpointsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Arguments for ‘setDataBreakpoints’ request.
#
# source://ruby-dap//lib/dap/set_data_breakpoints_arguments.rb#4
class DAP::SetDataBreakpointsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Response to ‘setDataBreakpoints’ request. Returned is information about each
# breakpoint created by this request.
#
# source://ruby-dap//lib/dap/set_data_breakpoints_response_body.rb#5
class DAP::SetDataBreakpointsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Arguments for ‘setExceptionBreakpoints’ request.
#
# source://ruby-dap//lib/dap/set_exception_breakpoints_arguments.rb#4
class DAP::SetExceptionBreakpointsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def exceptionOptions; end

  # source://ruby-dap//lib/dap/base.rb#93
  def filters; end
end

# Arguments for ‘setExpression’ request.
#
# source://ruby-dap//lib/dap/set_expression_arguments.rb#4
class DAP::SetExpressionArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def expression; end

  # source://ruby-dap//lib/dap/base.rb#93
  def format; end

  # source://ruby-dap//lib/dap/base.rb#93
  def frameId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def value; end
end

# Response to ‘setExpression’ request.
#
# source://ruby-dap//lib/dap/set_expression_response_body.rb#4
class DAP::SetExpressionResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def indexedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def namedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def presentationHint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def type; end

  # source://ruby-dap//lib/dap/base.rb#93
  def value; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Arguments for ‘setFunctionBreakpoints’ request.
#
# source://ruby-dap//lib/dap/set_function_breakpoints_arguments.rb#4
class DAP::SetFunctionBreakpointsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Response to ‘setFunctionBreakpoints’ request. Returned is information about each
# breakpoint created by this request.
#
# source://ruby-dap//lib/dap/set_function_breakpoints_response_body.rb#5
class DAP::SetFunctionBreakpointsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Arguments for ‘setInstructionBreakpoints’ request
#
# source://ruby-dap//lib/dap/set_instruction_breakpoints_arguments.rb#4
class DAP::SetInstructionBreakpointsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Response to ‘setInstructionBreakpoints’ request
#
# source://ruby-dap//lib/dap/set_instruction_breakpoints_response_body.rb#4
class DAP::SetInstructionBreakpointsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def breakpoints; end
end

# Arguments for ‘setVariable’ request.
#
# source://ruby-dap//lib/dap/set_variable_arguments.rb#4
class DAP::SetVariableArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def format; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def value; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Response to ‘setVariable’ request.
#
# source://ruby-dap//lib/dap/set_variable_response_body.rb#2
class DAP::SetVariableResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def indexedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def namedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def type; end

  # source://ruby-dap//lib/dap/base.rb#93
  def value; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# A Source is a descriptor for source code. It is returned from the debug adapter
# as part of a StackFrame and it is used by clients when specifying breakpoints.
#
# source://ruby-dap//lib/dap/source.rb#6
class DAP::Source < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def adapterData; end

  # source://ruby-dap//lib/dap/base.rb#93
  def checksums; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def origin; end

  # source://ruby-dap//lib/dap/base.rb#93
  def path; end

  # source://ruby-dap//lib/dap/base.rb#93
  def presentationHint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def sourceReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def sources; end
end

# Arguments for ‘source’ request.
#
# source://ruby-dap//lib/dap/source_arguments.rb#4
class DAP::SourceArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def source; end

  # source://ruby-dap//lib/dap/base.rb#93
  def sourceReference; end
end

# Properties of a breakpoint or logpoint passed to the setBreakpoints request.
#
# source://ruby-dap//lib/dap/source_breakpoint.rb#2
class DAP::SourceBreakpoint < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def condition; end

  # source://ruby-dap//lib/dap/base.rb#93
  def hitCondition; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def logMessage; end
end

# Response to ‘source’ request.
#
# source://ruby-dap//lib/dap/source_response_body.rb#2
class DAP::SourceResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def content; end

  # source://ruby-dap//lib/dap/base.rb#93
  def mimeType; end
end

# A Stackframe contains the source location.
#
# source://ruby-dap//lib/dap/stack_frame.rb#4
class DAP::StackFrame < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def column; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endColumn; end

  # source://ruby-dap//lib/dap/base.rb#93
  def endLine; end

  # source://ruby-dap//lib/dap/base.rb#93
  def id; end

  # source://ruby-dap//lib/dap/base.rb#93
  def instructionPointerReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def moduleId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def presentationHint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def source; end
end

# Provides formatting information for a stack frame.
#
# source://ruby-dap//lib/dap/stack_frame_format.rb#4
class DAP::StackFrameFormat < ::DAP::ValueFormat
  # source://ruby-dap//lib/dap/base.rb#93
  def includeAll; end

  # source://ruby-dap//lib/dap/base.rb#93
  def line; end

  # source://ruby-dap//lib/dap/base.rb#93
  def module; end

  # source://ruby-dap//lib/dap/base.rb#93
  def parameterNames; end

  # source://ruby-dap//lib/dap/base.rb#93
  def parameterTypes; end

  # source://ruby-dap//lib/dap/base.rb#93
  def parameterValues; end

  # source://ruby-dap//lib/dap/base.rb#93
  def parameters; end
end

# Arguments for ‘stackTrace’ request.
#
# source://ruby-dap//lib/dap/stack_trace_arguments.rb#4
class DAP::StackTraceArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def format; end

  # source://ruby-dap//lib/dap/base.rb#93
  def levels; end

  # source://ruby-dap//lib/dap/base.rb#93
  def startFrame; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Response to ‘stackTrace’ request.
#
# source://ruby-dap//lib/dap/stack_trace_response_body.rb#4
class DAP::StackTraceResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def stackFrames; end

  # source://ruby-dap//lib/dap/base.rb#93
  def totalFrames; end
end

# Arguments for ‘stepBack’ request.
#
# source://ruby-dap//lib/dap/step_back_arguments.rb#4
class DAP::StepBackArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def granularity; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Arguments for ‘stepIn’ request.
#
# source://ruby-dap//lib/dap/step_in_arguments.rb#4
class DAP::StepInArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def granularity; end

  # source://ruby-dap//lib/dap/base.rb#93
  def targetId; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# A StepInTarget can be used in the ‘stepIn’ request and determines into which
# single target the stepIn request should step.
#
# source://ruby-dap//lib/dap/step_in_target.rb#3
class DAP::StepInTarget < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def id; end

  # source://ruby-dap//lib/dap/base.rb#93
  def label; end
end

# Arguments for ‘stepInTargets’ request.
#
# source://ruby-dap//lib/dap/step_in_targets_arguments.rb#2
class DAP::StepInTargetsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def frameId; end
end

# Response to ‘stepInTargets’ request.
#
# source://ruby-dap//lib/dap/step_in_targets_response_body.rb#4
class DAP::StepInTargetsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def targets; end
end

# Arguments for ‘stepOut’ request.
#
# source://ruby-dap//lib/dap/step_out_arguments.rb#4
class DAP::StepOutArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def granularity; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# The granularity of one ‘step’ in the stepping requests ‘next’, ‘stepIn’,
# ‘stepOut’, and ‘stepBack’.
#
# source://ruby-dap//lib/dap/stepping_granularity.rb#3
class DAP::SteppingGranularity < ::DAP::Enum; end

# The step should allow one instruction to execute (e.g. one x86 instruction)
#
# source://ruby-dap//lib/dap/stepping_granularity.rb#14
DAP::SteppingGranularity::INSTRUCTION = T.let(T.unsafe(nil), DAP::SteppingGranularity)

# The step should allow the program to run until the current source line has
# executed
#
# source://ruby-dap//lib/dap/stepping_granularity.rb#12
DAP::SteppingGranularity::LINE = T.let(T.unsafe(nil), DAP::SteppingGranularity)

# The step should allow the program to run until the current statement has
# finished executing. The meaning of a statement is determined by the adapter
# and it may be considered equivalent to a line. For example ‘for(int i = 0; i
# < 10; i++)’ could be considered to have 3 statements ‘int i = 0’, ‘i < 10’,
# and ‘i++’
#
# source://ruby-dap//lib/dap/stepping_granularity.rb#9
DAP::SteppingGranularity::STATEMENT = T.let(T.unsafe(nil), DAP::SteppingGranularity)

# The event indicates that the execution of the debuggee has stopped due to some
# condition. This can be caused by a break point previously set, a stepping
# request has completed, by executing a debugger statement etc.
#
# source://ruby-dap//lib/dap/stopped_event_body.rb#4
class DAP::StoppedEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def allThreadsStopped; end

  # source://ruby-dap//lib/dap/base.rb#93
  def description; end

  # source://ruby-dap//lib/dap/base.rb#93
  def preserveFocusHint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def reason; end

  # source://ruby-dap//lib/dap/base.rb#93
  def text; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Arguments for ‘terminate’ request.
#
# source://ruby-dap//lib/dap/terminate_arguments.rb#2
class DAP::TerminateArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def restart; end
end

# Arguments for ‘terminateThreads’ request.
#
# source://ruby-dap//lib/dap/terminate_threads_arguments.rb#2
class DAP::TerminateThreadsArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def threadIds; end
end

# The event indicates that debugging of the debuggee has terminated. This does not
# mean that the debuggee itself has exited.
#
# source://ruby-dap//lib/dap/terminated_event_body.rb#3
class DAP::TerminatedEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def restart; end
end

# A Thread
#
# source://ruby-dap//lib/dap/thread.rb#2
class DAP::Thread < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def id; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end
end

# The event indicates that a thread has started or exited.
#
# source://ruby-dap//lib/dap/thread_event_body.rb#2
class DAP::ThreadEventBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def reason; end

  # source://ruby-dap//lib/dap/base.rb#93
  def threadId; end
end

# Response to ‘threads’ request.
#
# source://ruby-dap//lib/dap/threads_response_body.rb#4
class DAP::ThreadsResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def threads; end
end

# Provides formatting information for a value.
#
# source://ruby-dap//lib/dap/value_format.rb#2
class DAP::ValueFormat < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def hex; end
end

# A Variable is a name/value pair. Optionally a variable can have a ‘type’ that is
# shown if space permits or when hovering over the variable’s name. An optional
# ‘kind’ is used to render additional properties of the variable, e.g. different
# icons can be used to indicate that a variable is public or private. If the value
# is structured (has children), a handle is provided to retrieve the children with
# the VariablesRequest. If the number of named or indexed children is large, the
# numbers should be returned via the optional ‘namedVariables’ and
# ‘indexedVariables’ attributes. The client can use this optional information to
# present the children in a paged UI and fetch them in chunks.
#
# source://ruby-dap//lib/dap/variable.rb#12
class DAP::Variable < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def evaluateName; end

  # source://ruby-dap//lib/dap/base.rb#93
  def indexedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def memoryReference; end

  # source://ruby-dap//lib/dap/base.rb#93
  def name; end

  # source://ruby-dap//lib/dap/base.rb#93
  def namedVariables; end

  # source://ruby-dap//lib/dap/base.rb#93
  def presentationHint; end

  # source://ruby-dap//lib/dap/base.rb#93
  def type; end

  # source://ruby-dap//lib/dap/base.rb#93
  def value; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Optional properties of a variable that can be used to determine how to render
# the variable in the UI.
#
# source://ruby-dap//lib/dap/variable_presentation_hint.rb#3
class DAP::VariablePresentationHint < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def attributes; end

  # source://ruby-dap//lib/dap/base.rb#93
  def kind; end

  # source://ruby-dap//lib/dap/base.rb#93
  def visibility; end
end

# Arguments for ‘variables’ request.
#
# source://ruby-dap//lib/dap/variables_arguments.rb#4
class DAP::VariablesArguments < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def count; end

  # source://ruby-dap//lib/dap/base.rb#93
  def filter; end

  # source://ruby-dap//lib/dap/base.rb#93
  def format; end

  # source://ruby-dap//lib/dap/base.rb#93
  def start; end

  # source://ruby-dap//lib/dap/base.rb#93
  def variablesReference; end
end

# Response to ‘variables’ request.
#
# source://ruby-dap//lib/dap/variables_response_body.rb#4
class DAP::VariablesResponseBody < ::DAP::Base
  # source://ruby-dap//lib/dap/base.rb#93
  def variables; end
end
